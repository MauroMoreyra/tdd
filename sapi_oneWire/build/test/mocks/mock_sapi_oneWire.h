/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_SAPI_ONEWIRE_H
#define _MOCK_SAPI_ONEWIRE_H

#include "sapi_oneWire.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_sapi_oneWire_Init(void);
void mock_sapi_oneWire_Destroy(void);
void mock_sapi_oneWire_Verify(void);




#define ONE_WIRE_configGpio_IgnoreAndReturn(cmock_retval) ONE_WIRE_configGpio_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ONE_WIRE_configGpio_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define ONE_WIRE_configGpio_ExpectAndReturn(gpio, cmock_retval) ONE_WIRE_configGpio_CMockExpectAndReturn(__LINE__, gpio, cmock_retval)
void ONE_WIRE_configGpio_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, gpioMap_t gpio, bool_t cmock_to_return);
typedef bool_t (* CMOCK_ONE_WIRE_configGpio_CALLBACK)(gpioMap_t gpio, int cmock_num_calls);
void ONE_WIRE_configGpio_StubWithCallback(CMOCK_ONE_WIRE_configGpio_CALLBACK Callback);
#define ONE_WIRE_configSpeed_IgnoreAndReturn(cmock_retval) ONE_WIRE_configSpeed_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ONE_WIRE_configSpeed_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define ONE_WIRE_configSpeed_ExpectAndReturn(speed, cmock_retval) ONE_WIRE_configSpeed_CMockExpectAndReturn(__LINE__, speed, cmock_retval)
void ONE_WIRE_configSpeed_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t speed, bool_t cmock_to_return);
typedef bool_t (* CMOCK_ONE_WIRE_configSpeed_CALLBACK)(uint8_t speed, int cmock_num_calls);
void ONE_WIRE_configSpeed_StubWithCallback(CMOCK_ONE_WIRE_configSpeed_CALLBACK Callback);
#define ONE_WIRE_verifySensorPresence_IgnoreAndReturn(cmock_retval) ONE_WIRE_verifySensorPresence_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ONE_WIRE_verifySensorPresence_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define ONE_WIRE_verifySensorPresence_ExpectAndReturn(oneWireData, cmock_retval) ONE_WIRE_verifySensorPresence_CMockExpectAndReturn(__LINE__, oneWireData, cmock_retval)
void ONE_WIRE_verifySensorPresence_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, oneWireData_t* oneWireData, bool_t cmock_to_return);
typedef bool_t (* CMOCK_ONE_WIRE_verifySensorPresence_CALLBACK)(oneWireData_t* oneWireData, int cmock_num_calls);
void ONE_WIRE_verifySensorPresence_StubWithCallback(CMOCK_ONE_WIRE_verifySensorPresence_CALLBACK Callback);
#define ONE_WIRE_readSensorRomData_IgnoreAndReturn(cmock_retval) ONE_WIRE_readSensorRomData_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ONE_WIRE_readSensorRomData_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define ONE_WIRE_readSensorRomData_ExpectAndReturn(oneWireData, cmock_retval) ONE_WIRE_readSensorRomData_CMockExpectAndReturn(__LINE__, oneWireData, cmock_retval)
void ONE_WIRE_readSensorRomData_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, oneWireData_t* oneWireData, bool_t cmock_to_return);
typedef bool_t (* CMOCK_ONE_WIRE_readSensorRomData_CALLBACK)(oneWireData_t* oneWireData, int cmock_num_calls);
void ONE_WIRE_readSensorRomData_StubWithCallback(CMOCK_ONE_WIRE_readSensorRomData_CALLBACK Callback);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
